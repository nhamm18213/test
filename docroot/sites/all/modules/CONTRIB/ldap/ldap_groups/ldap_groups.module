<?php
/** @file
 *
 *  Provisions Drupal roles to LDAP groups.
 *
 */

define('LDAP_GROUPS_PROV_ON_LDAP_ENTRY_CREATED', 1);
define('LDAP_GROUPS_PROV_ON_LDAP_ENTRY_UPDATED', 2);
define('LDAP_GROUPS_PROV_ON_LDAP_ENTRY_DELETED', 3);
define('LDAP_GROUPS_PROV_NO_CREATE', 1);
define('LDAP_GROUPS_PROV_NO_REMOVE', 2);
define('LDAP_GROUPS_PROV_DELETE_EMPTY_GROUPS', 3);
/**
 * Implements hook_menu().
 */
function ldap_groups_menu() {
  $items = array();

  $items['admin/config/people/ldap/groups'] = array(
    'title' => 'Groups',
    'description' => 'Settings related to LDAP Groups.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ldap_groups_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
    'file' => 'ldap_groups.admin.inc',
  );

  return $items;
}

/**
 *
 * return ldap group conf object
 *
 * @param enum $type 'default', 'admin',
 * @param boolean $reset do not use cached or static result
 * @return LdapGroupsConf or LdapGroupsConfAdmin object
 */
   
function ldap_groups_conf($type = 'default', $reset = FALSE) {
  
  static $ldapGroupsConf;
  static $ldapGroupsConfAdmin;

  if ($type == 'admin' && (!$ldapGroupsConfAdmin || $reset)) {
    ldap_servers_module_load_include('php', 'ldap_groups', 'LdapGroupsConfAdmin.class');
    $ldapGroupsConfAdmin = new LdapGroupsConfAdmin();
  }
  elseif (!$ldapGroupsConf || $reset) {
    ldap_servers_module_load_include('php', 'ldap_groups', 'LdapGroupsConf.class');
    $ldapGroupsConf = new LdapGroupsConf();
  }
  return ($type == 'admin') ? $ldapGroupsConfAdmin : $ldapGroupsConf;
  
}

function _ldap_groups_conf_if_not($object) {
  if ($object) {
    return $object;
  }
  else {
    return ldap_groups_conf();
  }
}

function ldap_groups_conf_cache_clear() {
  $discard = ldap_groups_conf('admin', TRUE);
  $discard = ldap_groups_conf(NULL, TRUE);
}

/**
 * Implements hook_ldap_entry_post_provision().
 *
 * The 'add' hook is invoked from $ldapUserConf->provisionLdapEntry(),
 * which is called from ldap_user_user_login(), ldap_user_user_insert(),
 * ldap_user_user_update(), and ldap_user_ws(). 
 *
 * The 'update' hook is invoked from $ldapUserConf->synchToLdapEntry(),
 * which is called from ldap_user_user_login(), ldap_user_user_insert(),
 * ldap_user_user_update(), and ldap_user_ws().
 *
 * Examples of information available:
 *   $attribute_name = $ldap_groups_conf->ldapProvisionGroupsRoleAttribute;
 *   $base_dn = $ldap_groups_conf->ldapProvisionGroupsBaseDn;
 *   $object_class = $ldap_groups_conf->groupObjectClass;
 *   $sid = $ldap_groups_conf->ldapProvisionSid;
 *   $group_provisioning_ldap_server = $ldap_groups_conf->ldapProvisionServer;
 *
 * @param $ldap_entries
 *  An array of entries.
 * @param $user_provisioning_ldap_server
 *  The server object.
 * @param $context
 *  - action string 
 *    The operations of add, update, or delete.
 *    @TODO 'delete' is not invoked anywhere yet.
 *  - corresponding_drupal_data array
 *    An array with the dn as the key and the data object as the value.
 *    The data object may or may not be a real, complete user object.
 *  - corresponding_drupal_data_type
 *    The type of data. 
 *    @TODO Only 'user' seems to be implemented.
 */
function ldap_groups_ldap_entry_post_provision($ldap_entries, $user_provisioning_ldap_server, $context) {
  // ATM we only care about user actions.
  $type = $context['corresponding_drupal_data_type'];
  if ($type != 'user') {
    return;
  }

  $op = $context['action']; //'add', 'update', 'delete'

  $ldap_groups_conf = ldap_groups_conf();

  foreach ($ldap_entries as $lcase_dn => $ldap_entry) {
    $user = $context['corresponding_drupal_data'][$lcase_dn];
    $roles = $user->roles;

    // The only way we can be sure which groups a user belongs to is
    // to query the LDAP server. Even checking the previous roles in
    // Drupal won't tell us what LDAP groups they're in.

    $add = array();
    $remove = array();

    // Find the groups this user belongs to, so we can compare it
    // to the roles they have in Drupal. They might have a group in LDAP
    // that they need to be removed from.

    $ldap_groups = $ldap_groups_conf->ldapProvisionServer->groupMembershipsFromUser($lcase_dn, 'group_dns');

    foreach ($roles as $rid => $role) {

      // Ignore the authenticated and anonymous roles.
      if ($rid == DRUPAL_AUTHENTICATED_RID || $rid == DRUPAL_ANONYMOUS_RID) {
        continue;
      }
      foreach ($ldap_groups as $group) {
        // There was a group on LDAP that they don't currently have a
        // role for. We need to remove them from that group.
        if (!ldap_groups_compare($role, $group)) {
          $remove[] = $group;
        }
        // They have a role for a group they are not in yet.
        // We need to add them to the group.
        else {
          $add[] = $role;
        }
      }
    }

    // Now we have an array of groups we need to add and remove this
    // user from.

    foreach ($remove as $role) {
      ldap_groups_remove_user($role, $ldap_entry, $ldap_groups_conf);
    }

    foreach ($add as $role) {
      ldap_groups_add_user($role, $ldap_entry, $ldap_groups_conf);
    }
  }
  
}

/**
 * See if a Drupal role and a LDAP group are the same.
 * Test is wrapped in a function to centralize the comparison
 * logic in a single place.
 */
function ldap_groups_compare($role, $group) {
  if (ldap_groups_role_to_group($role) == $group) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Function to return the name of the group, based on the
 * name of the role. They might be the same, or might need
 * token substitutions.
 */
function ldap_groups_role_to_group($role) {
  // Do whatever needs to be done to alter the name.
  return $role;
}

/**
 * Get the group dn for a role.
 */
function ldap_groups_get_group_dn_from_role($role, $ldap_groups_conf = NULL) {
  $ldap_groups_conf = _ldap_groups_conf_if_not($ldap_groups_conf);
  return $ldap_groups_conf->groupDnFromRole($role);
}

/**
 * See if a user is a member of a LDAP group.
 *
 * @param string $role as drupal role in string form
 * @param array $ldap_entry as ldap entry array
 * @param LdapGroupsConf $ldap_groups_conf.  ldap groups configuration object
 * @param enum $nested = NULL (default to server configuration), TRUE, or FALSE indicating to test for nested groups
 */
function ldap_groups_check_membership($role, $ldap_entry, $ldap_groups_conf = NULL, $nested = NULL) {
  $ldap_groups_conf = _ldap_groups_conf_if_not($ldap_groups_conf);
  $group_dn = $ldap_groups_conf->groupDnFromRole($role);
  return ($group_dn) ? $ldap_groups_conf->ldapProvisionServer->groupIsMember($group_dn, $ldap_entry['dn'], $nested) : FALSE;
}

/**
 * Add a new LDAP group.
 * 
 * @param string $role as drupal role in string form
 * @param LdapGroupsConf $ldap_groups_conf.  ldap groups configuration object
 * @param array $attributes as ldap attributes of group.  if none, defaults will be used where appropriate
 */
function ldap_groups_add_group($role, $ldap_groups_conf = NULL, $attributes = array()) {
  $ldap_groups_conf = _ldap_groups_conf_if_not($ldap_groups_conf);
  $group_dn = $ldap_groups_conf->groupDnFromRole($role);
  $result = $ldap_groups_conf->ldapProvisionServer->groupAddGroup($group_dn, $attributes);
}

/**
 * Remove a LDAP group.
 * 
 * @param string $role as drupal role in string form
 * @param LdapGroupsConf $ldap_groups_conf.  ldap groups configuration object
 * @param boolean $only_if_group_empty indicating if group should not be removed if not empty
 */
function ldap_groups_remove_group($role, $ldap_groups_conf = NULL, $only_if_group_empty = TRUE) {
  $ldap_groups_conf = _ldap_groups_conf_if_not($ldap_groups_conf);
  $group_dn = $ldap_groups_conf->groupDnFromRole($role);
  $result = $ldap_groups_conf->ldapProvisionServer->groupRemoveGroup($group_dn, $only_if_group_empty);
}

/**
 * Add a LDAP user to a LDAP group.
 * 
 * @param string $role as drupal role in string form
 * @param array $ldap_entry in ldap array format
 * @param LdapGroupsConf $ldap_groups_conf.  ldap groups configuration object
 */
function ldap_groups_add_user($role, $ldap_entry, $ldap_groups_conf = NULL) {
  $ldap_groups_conf = _ldap_groups_conf_if_not($ldap_groups_conf);
  $group_dn = $ldap_groups_conf->groupDnFromRole($role);
  $result = $ldap_groups_conf->ldapProvisionServer->groupAddMember($group_dn, $ldap_entry['dn']);

}

/**
 * A function to remove a LDAP user from a LDAP group.
 */
function ldap_groups_remove_user($role, $ldap_entry, $ldap_groups_conf, $ldap_groups_conf = NULL) {
    //@todo whether or not empty groups are allowed needs to be configurable in ldap_servers module
  $ldap_groups_conf = _ldap_groups_conf_if_not($ldap_groups_conf);
  $group_dn = $ldap_groups_conf->groupDnFromRole($role);
  $result = $ldap_groups_conf->ldapProvisionServer->groupRemoveMember($group_dn, $ldap_entry['dn']);
}

